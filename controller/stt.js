const {SpeechClient} = require('@google-cloud/speech');
const {bucketUpload} = require("./bucketUpload");

async function stt(bucketName, audioFilePath, outputFilePath) {
    try {
        const speechClient = new SpeechClient();
        const audioUri = `gs://${bucketName}/${audioFilePath}`;//Ïò§ÎîîÏò§ ÏúÑÏπò(gs Î≤ÑÌÇ∑)

        //stt ÏòµÏÖò
        const audio = {uri: audioUri};
        const config = {
            encoding: 'LINEAR16',  // Ïù∏ÏΩîÎî©
            sampleRateHertz: 16000,  // ÏÉòÌîåÎßÅ Î†àÏù¥Ìä∏
            languageCode: 'ko-KR',
            enableWordTimeOffsets: true,  // Îã®Ïñ¥Î≥Ñ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ
            enableAutomaticPunctuation: true,  // Î¨∏Ïû• Î∂ÄÌò∏
            useEnhanced: true,  // Ìñ•ÏÉÅÎêú Î™®Îç∏
            model: 'latest_long',  // Í∏¥ Î¨∏Ïû•Ïóê ÏµúÏ†ÅÌôîÎêú Î™®Îç∏
        };

        console.log(`Transcribing file`);

        // stt Ïã§Ìñâ
        const [operation] = await speechClient.longRunningRecognize({config, audio});
        const [response] = await operation.promise();

        //stt Í≤∞Í≥º ÏóêÎü¨ Ï≤¥ÌÅ¨
        if (!response || !response.results || response.results.length === 0) {
            throw new Error('No transcription results found');
        }


        // Í≤∞Í≥ºÍ∞í -> json Î≥ÄÌôò
        const transcriptionData = response.results.map((result) => ({
            text: result.alternatives[0].transcript,
            words: result.alternatives[0].words.map((wordInfo) => ({
                word: wordInfo.word,
                startTime: parseFloat(wordInfo.startTime.seconds) + wordInfo.startTime.nanos * 1e-9,
                endTime: parseFloat(wordInfo.endTime.seconds) + wordInfo.endTime.nanos * 1e-9,
            })),
        }));


        // üéØ JSON Îç∞Ïù¥ÌÑ∞Î•º GCSÏóê Ï†ÄÏû•
        await bucketUpload(bucketName, outputFilePath, JSON.stringify(transcriptionData, null, 2));
        console.log(`‚úÖ JSON file saved to: gs://${bucketName}/${outputFilePath}`);

        return transcriptionData;
    } catch (error) {
        console.error('‚ùå Error in transcribeAndSave:', error);
        throw error;
    }
}

exports.stt = stt;